import React, { useState, useEffect} from 'react';
import styles from "./Mypage.module.css"
import { useNavigate } from "react-router-dom";
import Header from "../../components/_Layout/Header";
import Sidebar from "../../components/_Layout/Sidebars";
import donggae from '../../image/donggae.png';
import { MultiSelect } from "react-multi-select-component";

export default function Mypage() {
    const history = useNavigate();


    const [selectedLanguages, setSelectedLanguages] = useState([]);
    const languages = [
            { value: "JavaScript", label: "JavaScriptü•ù" },
            { value: "TypeScript", label: "TypeScriptü••" },
            { value: "React", label: "Reactüçá" },
            { value: "Vue", label: "Vueüçà" },
            { value: "Svelte", label: "Svelteüçâ" },
            { value: "Nextjs", label: "Next.jsüçä" },
            { value: "Nodejs", label: "Node.jsüçã" },
            { value: "Java", label: "Javaüçç" },
            { value: "Spring", label: "Springü•≠" },
            { value: "Go", label: "Goüçé" },
            { value: "Nestjs", label: "Nest.jsüçè" },
            { value: "Kotlin", label: "Kotlinüçê" },
            { value: "Express", label: "Expressüçë" },
            { value: "MySQL", label: "MySQLüçí" },
            { value: "MongoDB", label: "MongoDBüçì" },
            { value: "Python", label: "Pythonü´ê" },
            { value: "Django", label: "DjangoüçÖ" },
            { value: "php", label: "PHPü´í" },
            { value: "GraphQL", label: "GraphQLüçÜ" },
            { value: "Firebase", label: "Firebaseü´ë" },
            { value: "Flutter", label: "Flutterü•ë" },
            { value: "Swift", label: "Swiftü•¨" },
            { value: "ReactNative", label: "React Nativeü•ï" },
            { value: "Unity", label: "Unityüå∏" },
            { value: "AWS", label: "AWSüå∫" },
            { value: "kubernetes", label: "KubernetesüåΩ" },
            { value: "Docker", label: "Dockerü•í" },
            { value: "Git", label: "Gitü•¶" },
            { value: "Figma", label: "Figmaü•î" },
            { value: "Zeplin", label: "Zeplinüå∂Ô∏è" },
            { value: "Jest", label: "JestüçÑ" },
        ];


    const [selectedFields, setSelectedFields] = useState([]);
    const fields = [
        { value: "BackEnd", label: "BackEnd ‚òòÔ∏è" },
        { value: "FrontEnd", label: "FrontEnd üå±" },
        { value: "iOS", label: "iOS üå≤" },
        { value: "Android", label: "Android üå≥" },
        { value: "AI", label: "AI üçÄ" },
        { value: "Game", label: "Game üåø" },
        { value: "UIUX", label: "UIUX üåµ" },
      ];


    const [selectedPersonalities, setSelectedPersonalities] = useState([]);
    const personalitys = [
        { value: "ÎÖºÎ¶¨Ï†ÅÏù∏", label: "ÎÖºÎ¶¨Ï†ÅÏù∏ üò∫" },
        { value: "Í≥ÑÌöçÏ†ÅÏù∏", label: "Í≥ÑÌöçÏ†ÅÏù∏ üïäÔ∏è" },
        { value: "ÍººÍººÌïú", label: "ÍººÍººÌïú üê∂" },
        { value: "Ïã†ÏÜçÌïú", label: "Ïã†ÏÜçÌïú üê∫" },
        { value: "ÏæåÌôúÌïú", label: "ÏæåÌôúÌïú ü¶Å" },
        { value: "Ï∞ΩÏùòÏ†ÅÏù∏", label: "Ï∞ΩÏùòÏ†ÅÏù∏ üêØ" },
        { value: "ÏÑ±Ïã§Ìïú", label: "ÏÑ±Ïã§Ìïú ü¶ä" },
        { value: "Î™©ÌëúÏßÄÌñ•Ï†Å", label: "Î™©ÌëúÏßÄÌñ•Ï†Å ü¶ù" },
        { value: "ÎÅàÍ∏∞ÏûàÎäî", label: "ÎÅàÍ∏∞ÏûàÎäî üêÆ" },
        { value: "Î¶¨Îçî", label: "Î¶¨Îçî üê≤" },
        { value: "ÌåîÎ°úÏõå", label: "ÌåîÎ°úÏõå üêî" },
        { value: "Ïª§ÎÆ§ÎãàÏºÄÏù¥ÌÑ∞", label: "Ïª§ÎÆ§ÎãàÏºÄÏù¥ÌÑ∞ ü¶Ñ" },
        { value: "ÏôÑÎ≤ΩÏ£ºÏùòÏûê", label: "ÏôÑÎ≤ΩÏ£ºÏùòÏûê üê∞" },
        { value: "Î™®ÌóòÍ∞Ä", label: "Î™®ÌóòÍ∞Ä üêª" },
        { value: "Î∞úÎ™ÖÍ∞Ä", label: "Î∞úÎ™ÖÍ∞Ä üêª‚Äç‚ùÑÔ∏è" },
        { value: "Î∂ÑÏÑùÍ∞Ä", label: "Î∂ÑÏÑùÍ∞Ä üêº" },
        { value: "Ï§ëÏû¨Ïûê", label: "Ï§ëÏû¨Ïûê üê•" },
        { value: "ÎßåÎä•Ïû¨Ï£ºÍæº", label: "ÎßåÎä•Ïû¨Ï£ºÍæº üêá" }
      ];


    


    const[name, setName] = useState();
    const[selfIntro, setSelfIntro] = useState();
    const[bojRank, setBojRank] = useState();
    const[dguEmail, setDguEmail] = useState();
    const[userRank, setUserRank] = useState();
    const[teamExpCount, setTeamExpCount] = useState();
    const[leaderCount, setLeaderCount] = useState();
    const[devTestScore, setDevTestScore] = useState();
    const[userLanguageDTOS , setUserLanguageDTOS] =useState([]);
    const[userInterestFieldDTOS, setUserInterestFieldDTOS] = useState([]);
    const[userPersonalityDTOS, setUserPersonalityDTOS] =useState([]);
    const[userStudyFieldDTOS, setUserStudyFieldDTOS] = useState([]);

    let token = localStorage.getItem('token') || '';


    const [formData, setFormData] = useState() //ÏûêÍ∏∞ÏÜåÍ∞ú ÎÇ¥Ïö©
    const handleInputChange = (e) => {
        setFormData(e.target.value);
    };

    const [baekjoon, setBaekjoon] = useState() //ÏûêÍ∏∞ÏÜåÍ∞ú ÎÇ¥Ïö©
    const baekjoonInputChange = (e) => {
        setBaekjoon(e.target.value);
    };

    const selectedLanguagesV = selectedLanguages.map((data) => data.value);
    const selectedFieldsV = selectedFields.map((data) => data.value);
    const selectedPersonalitiesV = selectedPersonalities.map((data) => data.value);

    const Modify = {
        selfIntro : formData,
        userLanguages : selectedLanguagesV,
        userInterestFields : selectedFieldsV,
        userPersonalities : selectedPersonalitiesV,
    };

    const BojId = {
        baekjoonUserName : baekjoon
    }

    const BaekJoon = async() => {
        console.log(BojId);
        try {
            const res = await fetch('/mypage/addRank', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer {token}`
                },
                body: JSON.stringify(BojId),
            })     
        } catch (error) {
            console.error("Failed to fetch: ", error);
        }
    }

    const DataModify= async() => {
        console.log(Modify);
        try {
            const res = await fetch('/mypage', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer {token}`
                },
                body: JSON.stringify(Modify),
            })     
            if (res.ok) {
                alert("ÏûëÏÑ± ÏôÑÎ£å");
            } 
            else if (res.status === 400) {
                alert(`ÏàòÏ†ï ÏÑ±Í≥µ.`);
            } else {
                console.error("ÏàòÏ†ï Ïã§Ìå®.");
            }
        } catch (error) {
            console.error("Failed to fetch: ", error);
        }
    };


    useEffect(() => {
        const DataInquiry = () => {
            try {
                fetch('http://localhost:8080/mypage', {
                    method: "GET",
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    }).then(res=>res.json())        
                        .then(res=> {
                        console.log(res)
                        setName(res.githubName);
                        setSelfIntro(res.selfIntro);
                        setBojRank(res.bojRank);
                        setDguEmail(res.dguEmail);
                        setUserRank(res.userRank);
                        setTeamExpCount(res.teamExpCount);
                        setLeaderCount(res.leaderCount);
                        setDevTestScore(res.devTestScore);
                        setUserLanguageDTOS(res.userLanguageDTOS);
                        setUserInterestFieldDTOS(res.userInterestFieldDTOS);
                        setUserPersonalityDTOS(res.userPersonalityDTOS);
                        setUserStudyFieldDTOS(res.setUserStudyFieldDTOS);
                });

                } catch (error) {
                    console.error("Failed to fetch data: ", error);
                }
            };

            DataInquiry();
        },[]);



    return (
        <div className={styles.default}>
            <Header />
            <Sidebar/>
            <div className={styles.inner}>
                <div className={styles.body}>
                    <div className={styles.box__}>
                        <img className={styles.user_icon} alt="Image" src={localStorage.getItem('profile')} />
                        <div className={styles.user_box}>
                            <p className={styles.user_name_text}>{name}Îãò</p>
                            <p className={styles.user_email_text}>{dguEmail} @ dgu.ac.kr</p>
                        </div>

                        <div className={styles.data_area}><p>Ïñ∏Ïñ¥ ÏÑ§Ï†ï</p><MultiSelect options ={languages}
                                value={selectedLanguages}
                                onChange={setSelectedLanguages}
                                labelledBy="Select"/></div>
                        <div className={styles.data_area}><p>Í¥ÄÏã¨ Î∂ÑÏïº ÏÑ§Ï†ï</p><MultiSelect options ={fields}
                                value={selectedFields}
                                onChange={setSelectedFields}
                                labelledBy="Select"/></div>
                        <div className={styles.data_area}><p>ÏûêÍ∏∞ ÏÜåÍ∞ú</p>
                            <textarea
                                id="myself"
                                name="content"
                                placeholder="ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
                                value={formData}
                                onChange={handleInputChange}
                            /></div>
                        <div className={styles.data_area}><p>Í¥ÄÏã¨ Î∂ÑÏïº ÏÑ§Ï†ï</p><MultiSelect options ={personalitys} 
                                value={selectedPersonalities}
                                onChange={setSelectedPersonalities}
                                labelledBy="Select"/></div>
                        <div className={styles.data_area}><p>Î∞±Ï§Ä ÏïÑÏù¥Îîî</p>
                        <textarea
                                id="baekjoon"
                                name="content"
                                placeholder="ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
                                value={baekjoon}
                                onChange={baekjoonInputChange}
                            />
                        </div>

                        <button onClick={() => {
                        DataModify();
                        BaekJoon();
                        }}>ÏàòÏ†ïÌïòÍ∏∞</button>
                    </div>

                    <div className={styles.preview_box}>

                        <p className={styles.preview_title_text}>ÎÇ¥ Ï†ïÎ≥¥ ÎØ∏Î¶¨Î≥¥Í∏∞</p>

                        <div className={styles.preview_inner_box}>
                            <div className={styles.profile_box}>
                                <div className={styles.logo}>
                                <img className={styles.logoimg} alt="Image" src={localStorage.getItem('profile')} />
                                <div className={styles.profile_info}>
                                    <div className={styles.text__2}>Ìó§Ìó§</div>
                                    <br></br>
                                    Ïù¥Ïùµ
                                </div>
                                </div>
                            </div>

                            <div className={styles.profile_more}>
                                <div className={styles.keyword_box}>
                                    <div className={styles.keyword}>
                                        Î™®Ïßë Î∂ÑÏïº
                                    </div>
                                    <div className={styles.keyword}>
                                        ÏÑ†Ìò∏ Ïñ∏Ïñ¥
                                    </div>
                                </div>
                                <div className={styles.keyword_box}>
                                    <div className={styles.keyword}>
                                        ÏÑ±Í≤© ÌäπÏÑ±
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    );
}